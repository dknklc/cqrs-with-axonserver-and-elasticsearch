package com.dekankilic.cqrswithaxonserverandelasticsearch.command.aggregate;

import com.dekankilic.cqrswithaxonserverandelasticsearch.command.command.CreateProductCommand;
import com.dekankilic.cqrswithaxonserverandelasticsearch.command.command.UpdateProductCommand;
import com.dekankilic.cqrswithaxonserverandelasticsearch.common.event.ProductCreatedEvent;
import com.dekankilic.cqrswithaxonserverandelasticsearch.common.event.ProductUpdatedEvent;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.axonframework.commandhandling.CommandHandler;
import org.axonframework.eventsourcing.EventSourcingHandler;
import org.axonframework.modelling.command.AggregateIdentifier;
import org.axonframework.modelling.command.AggregateLifecycle;
import org.axonframework.spring.stereotype.Aggregate;

import java.math.BigDecimal;

@Aggregate // to let axon know that this is an aggregate component
@NoArgsConstructor // Axon needs this to properly apply events on an AccountAggregate instance
@Slf4j
public class ProductAggregate {  // We hold the state of a product at a certain point in time. We'll be writing in here the code to handle different commands and events so that an instance of this aggregate gets saved in the Event Store as an event.
    @AggregateIdentifier
    private String id; // we can uniquely identify an instance of AccountAggregate

    private String name;
    private String description;
    private BigDecimal price;
    private int stock;

    /*
     * When we receive CreateProductCommand, we need to apply an ProductCreatedEvent.To do that, let's use the aggregatelifecycle.apply() method and give a new instance of the event
     * we intend to apply which is the ProductCreatedEvent. When you call the apply method, the event gets persisted into the event store and the event store dispatches this event over
     * to the query side for further handling like actually saving the new account to the database.
     *
     * */

    @CommandHandler // let Axon know that this constructor is for handling CreateProductCommands, and execute this code when it receives a command to create.
    public ProductAggregate(CreateProductCommand createProductCommand){
        log.info("CreateProductCommand received");

        AggregateLifecycle.apply(new ProductCreatedEvent(createProductCommand.getId(),
                createProductCommand.getName(),
                createProductCommand.getDescription(),
                createProductCommand.getPrice(),
                createProductCommand.getStock()
                ));
    }

    /*
     * Since we applied an AccountCreatedEvent on the aggregate whenever we handle a CreateAccountCommand, we also need to handle that event.
     * We do that by writing another method with the event we want to handle as a parameter.
     *
     * */

    @EventSourcingHandler // to let Axon know that this method is a handler for an event generated by AccountAggregate.
    public void on(ProductCreatedEvent productCreatedEvent){
        log.info("An ProductCreatedEvent occurred");

        this.id = productCreatedEvent.getId();
        this.name = productCreatedEvent.getName();
        this.description = productCreatedEvent.getDescription();
        this.price = productCreatedEvent.getPrice();
        this.stock = productCreatedEvent.getStock();

    }


    /******************************************************************************************************************/

    @CommandHandler
    public void on(UpdateProductCommand updateProductCommand){
        log.info("UpdateProductCommand received");

        AggregateLifecycle.apply(new ProductUpdatedEvent(updateProductCommand.getId(),
                updateProductCommand.getPrice(),
                updateProductCommand.getStock()
                ));
    }

    @EventSourcingHandler
    public void on(ProductUpdatedEvent productUpdatedEvent){
        log.info("A ProductUpdatedEvent occurred");

        this.id = productUpdatedEvent.getId();
        this.stock = productUpdatedEvent.getStock();
        this.price = productUpdatedEvent.getPrice();
    }
}


/*
 * How would those requests that will be coming from RestAPI translate into commands?
 * For this, we will need to spin up those commands ourselves as we receive those http requests using the CommandGateway.
 * We do not want this to be autowired directly from our Rest Controller. Instead, we are going to call it from the service layer.
*/